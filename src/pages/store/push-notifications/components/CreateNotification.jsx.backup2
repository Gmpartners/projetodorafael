import React, { useState, useEffect } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { 
  PlusIcon,
  SendIcon,
  CalendarIcon,
  ImageIcon,
  TrashIcon,
  LinkIcon,
  EyeIcon,
  BellIcon,
  Loader2,
  Upload,
  Sparkles,
  Settings,
  Zap,
  MousePointer,
  ExternalLink,
  CheckCircle
} from 'lucide-react';
import { apiService } from '@/services/apiService';
import { useAuth } from '@/contexts/AuthContext';
import { toast } from 'sonner';
import { cn } from '@/lib/utils';

const CreateNotification = () => {
  const { user } = useAuth();
  const [title, setTitle] = useState('');
  const [body, setBody] = useState('');
  const [type, setType] = useState('custom');
  const [targetType, setTargetType] = useState('subscribers');
  const [targetUserId, setTargetUserId] = useState('');
  const [scheduledDate, setScheduledDate] = useState('');
  const [loading, setLoading] = useState(false);
  
  // 🆕 v7.0: Estados para URL personalizada
  const [customUrl, setCustomUrl] = useState('');
  const [urlValid, setUrlValid] = useState(null);
  const [validatingUrl, setValidatingUrl] = useState(false);

  // 🆕 v7.0: Estados para Actions inteligentes
  const [enableSmartActions, setEnableSmartActions] = useState(true);
  const [selectedActions, setSelectedActions] = useState([]);
  const [availableActions, setAvailableActions] = useState([]);

  // Estados para imagens personalizadas
  const [customIcon, setCustomIcon] = useState(null);
  const [customImage, setCustomImage] = useState(null);
  const [uploadingIcon, setUploadingIcon] = useState(false);
  const [uploadingImage, setUploadingImage] = useState(false);

  // 🆕 v7.0: Estados para configurações avançadas
  const [requireInteraction, setRequireInteraction] = useState(true);
  const [vibrationPattern, setVibrationPattern] = useState('default');
  const [showAdvanced, setShowAdvanced] = useState(false);

  // 🆕 v7.0: Carregar actions disponíveis quando o tipo mudar
  useEffect(() => {
    if (enableSmartActions && type) {
      loadAvailableActions(type);
    }
  }, [type, enableSmartActions]);

  // 🆕 v7.0: Validar URL personalizada quando ela mudar
  useEffect(() => {
    if (customUrl && customUrl.trim()) {
      validateUrl(customUrl);
    } else {
      setUrlValid(null);
    }
  }, [customUrl]);

  // 🆕 v7.0: Carregar actions disponíveis para o tipo
  const loadAvailableActions = async (notificationType) => {
    try {
      const templates = await apiService.getActionTemplates(notificationType);
      setAvailableActions(templates.actions || []);
      
      // Auto-selecionar as 2 primeiras actions se disponíveis
      if (templates.actions && templates.actions.length > 0) {
        setSelectedActions(templates.actions.slice(0, 2));
      }
    } catch (error) {
      console.error('❌ Erro ao carregar action templates:', error);
      
      // Fallback: Actions padrão baseadas no tipo
      const defaultActions = getDefaultActionsByType(notificationType);
      setAvailableActions(defaultActions);
      setSelectedActions(defaultActions.slice(0, 2));
    }
  };

  // 🆕 v7.0: Actions padrão por tipo (fallback)
  const getDefaultActionsByType = (type) => {
    const actionMap = {
      order_status: [
        { action: 'view_order', title: '📦 Ver Pedido', icon: '📦' },
        { action: 'track_order', title: '🚚 Rastrear', icon: '🚚' }
      ],
      chat_message: [
        { action: 'reply_chat', title: '💬 Responder', icon: '💬' },
        { action: 'view_chat', title: '👁️ Ver Chat', icon: '👁️' }
      ],
      custom_step: [
        { action: 'view_progress', title: '📊 Ver Progresso', icon: '📊' },
        { action: 'view_details', title: '📋 Detalhes', icon: '📋' }
      ],
      promotion: [
        { action: 'view_offer', title: '🛍️ Ver Oferta', icon: '🛍️' },
        { action: 'shop_now', title: '🛒 Comprar', icon: '🛒' }
      ],
      news: [
        { action: 'read_more', title: '📖 Ler Mais', icon: '📖' },
        { action: 'share', title: '🔗 Compartilhar', icon: '🔗' }
      ],
      feedback: [
        { action: 'rate_now', title: '⭐ Avaliar', icon: '⭐' },
        { action: 'write_review', title: '✍️ Comentar', icon: '✍️' }
      ],
      custom: [
        { action: 'open_app', title: '📱 Abrir App', icon: '📱' },
        { action: 'view_details', title: '👁️ Ver Detalhes', icon: '👁️' }
      ]
    };
    
    return actionMap[type] || actionMap.custom;
  };

  // 🆕 v7.0: Validar URL personalizada
  const validateUrl = async (url) => {
    if (!url || url.trim().length === 0) {
      setUrlValid(null);
      return;
    }

    setValidatingUrl(true);
    
    try {
      const result = await apiService.validateCustomUrl(url.trim());
      setUrlValid(result.valid);
      
      if (!result.valid && result.suggestion) {
        toast.info(`💡 Sugestão: ${result.suggestion}`);
      }
    } catch (error) {
      console.error('❌ Erro ao validar URL:', error);
      
      // Validação básica local como fallback
      const urlPattern = /^(https?:\/\/)?([\w\-\.]+)+([\w\-\._~:/?#[\]@!\$&'\(\)\*\+,;=.]+)?$/;
      const isValid = urlPattern.test(url.trim());
      setUrlValid(isValid);
    } finally {
      setValidatingUrl(false);
    }
  };

  // Upload de imagem para Firebase Storage
  const uploadImage = async (file, type) => {
    if (!file) return null;
    
    console.log('📤 Iniciando upload:', { fileName: file.name, type, size: file.size });
    
    const formData = new FormData();
    formData.append('file', file);
    formData.append('imageType', type);
    
    try {
      const result = await apiService.uploadStoreImage(formData);
      console.log('✅ Upload concluído:', result);
      
      const imageUrl = result.data?.imageUrl || result.imageUrl || result.data?.url || result.url;
      console.log('🔗 URL extraída:', imageUrl);
      
      return imageUrl;
    } catch (error) {
      console.error('❌ Erro no upload:', error);
      toast.error(`Erro ao fazer upload da ${type}: ${error.message}`);
      return null;
    }
  };

  const handleIconSelect = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    if (!file.type.startsWith('image/')) {
      toast.error('Apenas arquivos de imagem são permitidos');
      return;
    }

    if (file.size > 2 * 1024 * 1024) {
      toast.error('Logo muito grande. Máximo 2MB');
      return;
    }

    setUploadingIcon(true);
    toast.info('📤 Fazendo upload do logo...');
    
    try {
      const uploadedUrl = await uploadImage(file, 'notification_logo');
      
      if (uploadedUrl) {
        setCustomIcon(uploadedUrl);
        toast.success('✅ Logo enviado com sucesso!');
      } else {
        toast.error('Erro: URL da imagem não foi retornada');
      }
    } catch (error) {
      console.error('❌ Erro no handleIconSelect:', error);
      toast.error('Erro no upload do logo');
    } finally {
      setUploadingIcon(false);
    }
  };

  const handleImageSelect = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    if (!file.type.startsWith('image/')) {
      toast.error('Apenas arquivos de imagem são permitidos');
      return;
    }

    if (file.size > 5 * 1024 * 1024) {
      toast.error('Imagem muito grande. Máximo 5MB');
      return;
    }

    setUploadingImage(true);
    toast.info('📤 Fazendo upload da imagem...');
    
    try {
      const uploadedUrl = await uploadImage(file, 'notification_image');
      
      if (uploadedUrl) {
        setCustomImage(uploadedUrl);
        toast.success('✅ Imagem enviada com sucesso!');
      } else {
        toast.error('Erro: URL da imagem não foi retornada');
      }
    } catch (error) {
      console.error('❌ Erro no handleImageSelect:', error);
      toast.error('Erro no upload da imagem');
    } finally {
      setUploadingImage(false);
    }
  };

  const handleRemoveIcon = () => {
    setCustomIcon(null);
    const iconInput = document.getElementById('notification-logo');
    if (iconInput) iconInput.value = '';
    toast.success('Logo removido');
  };

  const handleRemoveImage = () => {
    setCustomImage(null);
    const imageInput = document.getElementById('notification-image');
    if (imageInput) imageInput.value = '';
    toast.success('Imagem removida');
  };

  const handleLabelClick = (type) => {
    const input = document.getElementById(`notification-${type}`);
    if (input) input.click();
  };

  // 🆕 v7.0: Gerar URL automática baseada no tipo
  const generateSmartUrl = () => {
    const baseUrl = 'https://projeto-rafael-53f73.web.app';
    let suggestedUrl = '';

    switch (type) {
      case 'order_status':
        suggestedUrl = `${baseUrl}/customer/orders`;
        break;
      case 'chat_message':
        suggestedUrl = `${baseUrl}/customer/chat`;
        break;
      case 'promotion':
        suggestedUrl = `${baseUrl}/customer/offers`;
        break;
      case 'news':
        suggestedUrl = `${baseUrl}/customer/news`;
        break;
      case 'feedback':
        suggestedUrl = `${baseUrl}/customer/feedback`;
        break;
      default:
        suggestedUrl = `${baseUrl}/customer/dashboard`;
    }

    setCustomUrl(suggestedUrl);
    toast.success('🎯 URL inteligente gerada!');
  };

  // 🆕 v7.0: Teste rápido da notificação
  const handleQuickTest = async () => {
    if (!title.trim() || !body.trim()) {
      toast.error('Preencha título e mensagem para testar');
      return;
    }

    try {
      const testData = {
        title: title.trim(),
        body: body.trim(),
        icon: customIcon,
        image: customImage,
        customUrl: customUrl || undefined,
        type
      };

      await apiService.sendWebPushTestWithCustomUrl(
        customUrl || 'https://projeto-rafael-53f73.web.app/customer/dashboard',
        testData
      );
      
      toast.success('🧪 Notificação de teste enviada!', {
        description: 'Verifique se recebeu a notificação'
      });
    } catch (error) {
      console.error('❌ Erro no teste:', error);
      toast.error('Erro ao enviar teste: ' + error.message);
    }
  };

  const handleSendNotification = async () => {
    if (!title.trim() || !body.trim()) {
      toast.error('Preencha título e mensagem');
      return;
    }

    if (targetType === 'subscribers' && !scheduledDate) {
      if (!confirm(`Confirma o envio imediato para TODOS os usuários inscritos?`)) {
        return;
      }
    }

    setLoading(true);
    try {
      console.log('📤 Enviando notificação v7.0...');

      const baseNotificationData = {
        title: title.trim(),
        body: body.trim(),
        type,
        // 🆕 v7.0: URL personalizada
        data: {
          type,
          timestamp: new Date().toISOString(),
          source: 'manual_creation_v7',
          url: customUrl || 'https://projeto-rafael-53f73.web.app/customer/dashboard'
        },
        // 🆕 v7.0: Actions inteligentes
        actions: enableSmartActions ? selectedActions : [],
        // 🆕 v7.0: Configurações avançadas
        requireInteraction,
        vibrate: getVibrationPattern(vibrationPattern)
      };

      // Incluir imagens personalizadas
      if (customIcon) {
        baseNotificationData.icon = customIcon;
      }
      
      if (customImage) {
        baseNotificationData.image = customImage;
      }

      if (scheduledDate) {
        const notificationData = {
          ...baseNotificationData,
          scheduledDate: new Date(scheduledDate).toISOString()
        };

        const result = await apiService.createNotification(notificationData);
        console.log('✅ Notificação v7.0 agendada:', result);
        
        toast.success('📅 Notificação v7.0 agendada com sucesso!', {
          description: `Será enviada em ${new Date(scheduledDate).toLocaleString()}`
        });
      } else {
        // 🆕 v7.0: Usar método correto baseado no tipo de destinatário
        let result;
        
        if (targetType === 'subscribers') {
          // CORRETO: Enviar para TODOS os inscritos da loja
          console.log('📢 Enviando para todos os inscritos da loja...');
          
          const storeId = user?.uid || localStorage.getItem('storeId');
          
          result = await apiService.sendWebPushToStore(
            storeId,
            baseNotificationData,
            customUrl || 'https://projeto-rafael-53f73.web.app/customer/dashboard'
          );
        } else {
          // Enviar para usuário específico
          console.log('👤 Enviando para usuário específico:', targetUserId);
          
          result = await apiService.sendCustomWebPushWithUrl(
            baseNotificationData,
            customUrl || 'https://projeto-rafael-53f73.web.app/customer/dashboard',
            targetUserId
          );
        }
        
        console.log('✅ Notificação v7.0 enviada:', result);
        
        toast.success('🚀 Notificação v7.0 enviada com sucesso!', {
          description: `Enviada com URL personalizada e ${selectedActions.length} actions`
        });
      }
      
      // Reset form
      resetForm();
      
    } catch (error) {
      console.error('❌ Erro ao enviar notificação v7.0:', error);
      toast.error('❌ Erro ao enviar notificação: ' + error.message);
    } finally {
      setLoading(false);
    }
  };

  // 🆕 v7.0: Reset do formulário
  const resetForm = () => {
    setTitle('');
    setBody('');
    setTargetUserId('');
    setScheduledDate('');
    setCustomUrl('');
    setCustomIcon(null);
    setCustomImage(null);
    setSelectedActions([]);
    setUrlValid(null);
    
    // Limpar inputs de arquivo
    const iconInput = document.getElementById('notification-logo');
    const imageInput = document.getElementById('notification-image');
    if (iconInput) iconInput.value = '';
    if (imageInput) imageInput.value = '';
  };

  // 🆕 v7.0: Obter padrão de vibração
  const getVibrationPattern = (pattern) => {
    const patterns = {
      default: [200, 100, 200],
      gentle: [100, 50, 100],
      strong: [300, 200, 300],
      pulse: [100, 100, 100, 100, 100],
      none: []
    };
    
    return patterns[pattern] || patterns.default;
  };

  return (
    <div className="space-y-6">
      <Card className="border-0 shadow-lg">
        <CardContent className="p-6">
          <div className="flex items-center space-x-3 mb-6">
            <div className="p-3 rounded-xl bg-gradient-to-br from-purple-100 to-purple-200 shadow-lg">
              <Sparkles className="h-6 w-6 text-purple-700" />
            </div>
            <div>
              <h3 className="text-xl font-bold text-zinc-900">Criar Notificação v7.0</h3>
              <p className="text-zinc-600">URL personalizada + Actions inteligentes + Campos configuráveis</p>
            </div>
          </div>

          <div className="space-y-6">
            {/* Form Fields Básicos */}
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="type">Tipo de Notificação</Label>
                <Select value={type} onValueChange={setType}>
                  <SelectTrigger>
                    <SelectValue placeholder="Selecione o tipo..." />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="order_status">📦 Status de Pedido</SelectItem>
                    <SelectItem value="chat_message">💬 Mensagem de Chat</SelectItem>
                    <SelectItem value="custom_step">📊 Etapa Personalizada</SelectItem>
                    <SelectItem value="promotion">🎁 Promoção</SelectItem>
                    <SelectItem value="news">📢 Novidade</SelectItem>
                    <SelectItem value="feedback">⭐ Solicitação de Avaliação</SelectItem>
                    <SelectItem value="custom">💬 Personalizada</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="target">Destinatário</Label>
                <Select value={targetType} onValueChange={setTargetType}>
                  <SelectTrigger>
                    <SelectValue placeholder="Selecione o destinatário..." />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="subscribers">👥 Todos os Inscritos</SelectItem>
                    <SelectItem value="user">👤 Usuário Específico</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            {targetType === 'user' && (
              <div className="space-y-2">
                <Label htmlFor="targetUserId">ID do Usuário</Label>
                <Input
                  id="targetUserId"
                  value={targetUserId}
                  onChange={(e) => setTargetUserId(e.target.value)}
                  placeholder="Ex: 0HeRINZTlvOM5raS8J4AkITanWP2"
                />
              </div>
            )}

            {/* 🆕 v7.0: URL Personalizada */}
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <Label htmlFor="customUrl">🎯 URL Personalizada (v7.0)</Label>
                <Button 
                  type="button"
                  variant="outline" 
                  size="sm"
                  onClick={generateSmartUrl}
                  className="text-xs"
                >
                  <Zap className="h-3 w-3 mr-1" />
                  Gerar Inteligente
                </Button>
              </div>
              <div className="relative">
                <LinkIcon className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-zinc-400" />
                <Input
                  id="customUrl"
                  value={customUrl}
                  onChange={(e) => setCustomUrl(e.target.value)}
                  placeholder="https://projeto-rafael-53f73.web.app/customer/dashboard"
                  className={cn(
                    "pl-10 pr-10",
                    urlValid === true && "border-green-500",
                    urlValid === false && "border-red-500"
                  )}
                />
                <div className="absolute right-3 top-1/2 transform -translate-y-1/2">
                  {validatingUrl ? (
                    <Loader2 className="h-4 w-4 animate-spin text-blue-500" />
                  ) : urlValid === true ? (
                    <CheckCircle className="h-4 w-4 text-green-500" />
                  ) : urlValid === false ? (
                    <ExternalLink className="h-4 w-4 text-red-500" />
                  ) : null}
                </div>
              </div>
              <p className="text-xs text-zinc-500">
                {customUrl ? 'Ao clicar na notificação, o usuário será levado para esta URL' : 'Deixe vazio para usar URL padrão do dashboard'}
              </p>
            </div>

            {/* 🆕 v7.0: Actions Inteligentes */}
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <Label className="text-sm font-semibold">🎯 Actions Inteligentes (v7.0)</Label>
                <Switch
                  checked={enableSmartActions}
                  onCheckedChange={setEnableSmartActions}
                />
              </div>
              
              {enableSmartActions && (
                <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 space-y-3">
                  <p className="text-sm text-blue-800 font-medium">
                    Actions configuradas automaticamente para tipo: <span className="font-bold">{type}</span>
                  </p>
                  
                  <div className="grid grid-cols-2 gap-2">
                    {selectedActions.slice(0, 2).map((action, index) => (
                      <div key={index} className="bg-white rounded-lg p-3 border border-blue-200">
                        <div className="flex items-center space-x-2">
                          <span className="text-lg">{action.icon}</span>
                          <div>
                            <p className="text-sm font-semibold text-blue-900">{action.title}</p>
                            <p className="text-xs text-blue-600">{action.action}</p>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                  
                  <p className="text-xs text-blue-600">
                    💡 As actions são configuradas automaticamente baseadas no tipo de notificação
                  </p>
                </div>
              )}
            </div>

            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <Label htmlFor="title">Título da Notificação</Label>
                <span className={cn(
                  "text-xs",
                  title.length > 40 ? "text-red-500 font-semibold" : "text-zinc-500"
                )}>
                  {title.length}/50 {title.length > 40 && "⚠️"}
                </span>
              </div>
              <Input
                id="title"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                placeholder="Ex: Nova promoção disponível!"
                maxLength={50}
              />
            </div>

            <div className="space-y-2">
              <div className="flex justify-between items-center">
                <Label htmlFor="body">Mensagem</Label>
                <span className={cn(
                  "text-xs",
                  body.length > 140 ? "text-red-500 font-semibold" : "text-zinc-500"
                )}>
                  {body.length}/160 {body.length > 140 && "⚠️"}
                </span>
              </div>
              <Textarea
                id="body"
                value={body}
                onChange={(e) => setBody(e.target.value)}
                placeholder="Digite a mensagem da notificação..."
                rows={3}
                maxLength={160}
              />
            </div>

            {/* Uploads de Imagem */}
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="notification-logo">Logo/Ícone Personalizado</Label>
                <div className="relative border-2 border-dashed border-zinc-300 rounded-lg p-4 hover:border-purple-400 transition-colors h-32">
                  {uploadingIcon ? (
                    <div className="h-full flex items-center justify-center">
                      <div className="text-center">
                        <Loader2 className="h-8 w-8 text-purple-600 mx-auto mb-2 animate-spin" />
                        <p className="text-sm text-purple-600 font-medium">Enviando logo...</p>
                      </div>
                    </div>
                  ) : customIcon ? (
                    <div className="relative h-full">
                      <img 
                        src={customIcon} 
                        alt="Logo personalizado"
                        className="w-full h-full object-contain rounded"
                      />
                      <Button
                        type="button"
                        onClick={handleRemoveIcon}
                        size="sm"
                        variant="destructive"
                        className="absolute -top-2 -right-2 h-6 w-6 p-0"
                      >
                        <TrashIcon className="h-3 w-3" />
                      </Button>
                      <div className="absolute bottom-1 left-1 bg-black/60 text-white text-xs px-2 py-1 rounded">
                        Logo Personalizado ✨
                      </div>
                    </div>
                  ) : (
                    <div 
                      className="cursor-pointer h-full flex items-center justify-center"
                      onClick={() => handleLabelClick('logo')}
                    >
                      <div className="text-center">
                        <Upload className="h-8 w-8 text-zinc-400 mx-auto mb-2" />
                        <p className="text-sm font-medium text-zinc-700">Logo do lado esquerdo</p>
                        <p className="text-xs text-zinc-500">Clique para personalizar</p>
                      </div>
                    </div>
                  )}
                  <input
                    id="notification-logo"
                    type="file"
                    accept="image/*"
                    onChange={handleIconSelect}
                    className="hidden"
                    disabled={uploadingIcon}
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="notification-image">Imagem Grande (Banner)</Label>
                <div className="relative border-2 border-dashed border-zinc-300 rounded-lg p-4 hover:border-purple-400 transition-colors h-32">
                  {uploadingImage ? (
                    <div className="h-full flex items-center justify-center">
                      <div className="text-center">
                        <Loader2 className="h-8 w-8 text-purple-600 mx-auto mb-2 animate-spin" />
                        <p className="text-sm text-purple-600 font-medium">Enviando imagem...</p>
                      </div>
                    </div>
                  ) : customImage ? (
                    <div className="relative h-full">
                      <img 
                        src={customImage} 
                        alt="Imagem personalizada"
                        className="w-full h-full object-cover rounded"
                      />
                      <Button
                        type="button"
                        onClick={handleRemoveImage}
                        size="sm"
                        variant="destructive"
                        className="absolute -top-2 -right-2 h-6 w-6 p-0"
                      >
                        <TrashIcon className="h-3 w-3" />
                      </Button>
                      <div className="absolute bottom-1 left-1 bg-black/60 text-white text-xs px-2 py-1 rounded">
                        Banner Personalizado ✨
                      </div>
                    </div>
                  ) : (
                    <div 
                      className="cursor-pointer h-full flex items-center justify-center"
                      onClick={() => handleLabelClick('image')}
                    >
                      <div className="text-center">
                        <Upload className="h-8 w-8 text-zinc-400 mx-auto mb-2" />
                        <p className="text-sm font-medium text-zinc-700">Banner expandível</p>
                        <p className="text-xs text-zinc-500">Clique para personalizar</p>
                      </div>
                    </div>
                  )}
                  <input
                    id="notification-image"
                    type="file"
                    accept="image/*"
                    onChange={handleImageSelect}
                    className="hidden"
                    disabled={uploadingImage}
                  />
                </div>
              </div>
            </div>

            {/* 🆕 v7.0: Configurações Avançadas */}
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <Label className="text-sm font-semibold">⚙️ Configurações Avançadas (v7.0)</Label>
                <Button
                  type="button"
                  variant="ghost"
                  size="sm"
                  onClick={() => setShowAdvanced(!showAdvanced)}
                >
                  <Settings className="h-4 w-4 mr-1" />
                  {showAdvanced ? 'Ocultar' : 'Mostrar'}
                </Button>
              </div>

              {showAdvanced && (
                <div className="bg-gray-50 border border-gray-200 rounded-lg p-4 space-y-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <Label className="text-sm font-medium">Requerer Interação</Label>
                      <p className="text-xs text-gray-600">Notificação não some automaticamente</p>
                    </div>
                    <Switch
                      checked={requireInteraction}
                      onCheckedChange={setRequireInteraction}
                    />
                  </div>

                  <div className="space-y-2">
                    <Label>Padrão de Vibração</Label>
                    <Select value={vibrationPattern} onValueChange={setVibrationPattern}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="default">📳 Padrão</SelectItem>
                        <SelectItem value="gentle">🔅 Suave</SelectItem>
                        <SelectItem value="strong">🔆 Forte</SelectItem>
                        <SelectItem value="pulse">💫 Pulso</SelectItem>
                        <SelectItem value="none">🔇 Sem Vibração</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              )}
            </div>

            <div className="space-y-2">
              <Label htmlFor="scheduledDate">Agendar Envio (Opcional)</Label>
              <Input
                id="scheduledDate"
                type="datetime-local"
                value={scheduledDate}
                onChange={(e) => setScheduledDate(e.target.value)}
                min={new Date().toISOString().slice(0, 16)}
              />
              <p className="text-xs text-zinc-500">
                {scheduledDate ? 'Será enviada automaticamente na data especificada' : 'Deixe vazio para envio imediato'}
              </p>
            </div>

            {/* Preview v7.0 Aprimorado */}
            {(title || body || customIcon || customImage || customUrl || selectedActions.length > 0) && (
              <div className="p-4 bg-gradient-to-r from-zinc-50 to-blue-50 rounded-xl border border-zinc-200">
                <h4 className="text-sm font-semibold text-zinc-700 mb-3 flex items-center">
                  <EyeIcon className="h-4 w-4 mr-2" />
                  Preview da Notificação v7.0
                </h4>
                <div className="bg-white rounded-lg p-4 shadow-sm border">
                  <div className="flex items-start space-x-3">
                    <div className="flex-shrink-0">
                      {customIcon ? (
                        <div className="relative">
                          <img src={customIcon} alt="Logo personalizado" className="h-8 w-8 rounded object-cover" />
                          <div className="absolute -top-1 -right-1 w-3 h-3 bg-green-500 rounded-full border border-white"></div>
                        </div>
                      ) : (
                        <div className="p-1.5 bg-blue-100 rounded">
                          <BellIcon className="h-5 w-5 text-blue-600" />
                        </div>
                      )}
                    </div>
                    <div className="flex-1 min-w-0">
                      <h5 className="font-semibold text-zinc-900 text-sm truncate">
                        {title || 'Título da notificação'}
                      </h5>
                      <p className="text-sm text-zinc-600 mt-1">
                        {body || 'Mensagem da notificação'}
                      </p>
                      {customImage && (
                        <div className="mt-2">
                          <img 
                            src={customImage} 
                            alt="Preview da imagem" 
                            className="w-full max-w-xs h-20 object-cover rounded border"
                          />
                        </div>
                      )}
                      {customUrl && (
                        <div className="mt-2 flex items-center text-xs text-blue-600">
                          <LinkIcon className="h-3 w-3 mr-1" />
                          <span className="truncate">{customUrl}</span>
                        </div>
                      )}
                      {selectedActions.length > 0 && (
                        <div className="mt-2 flex gap-2">
                          {selectedActions.slice(0, 2).map((action, index) => (
                            <div key={index} className="bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded flex items-center">
                              <MousePointer className="h-3 w-3 mr-1" />
                              {action.title}
                            </div>
                          ))}
                        </div>
                      )}
                      <div className="mt-2 flex items-center text-xs text-green-600 font-medium">
                        ✨ Notificação Web Push v7.0
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Botões de Ação */}
            <div className="flex gap-3">
              <Button 
                onClick={handleQuickTest}
                variant="outline"
                disabled={!title.trim() || !body.trim()}
                className="flex-1"
              >
                <EyeIcon className="h-4 w-4 mr-2" />
                Teste Rápido
              </Button>

              <Button 
                onClick={handleSendNotification}
                disabled={loading || !title.trim() || !body.trim() || uploadingIcon || uploadingImage}
                className="flex-1 bg-purple-600 hover:bg-purple-700"
              >
                {loading ? (
                  <>
                    <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                    {scheduledDate ? 'Agendando...' : 'Enviando...'}
                  </>
                ) : (
                  <>
                    {scheduledDate ? (
                      <>
                        <CalendarIcon className="h-4 w-4 mr-2" />
                        Agendar v7.0
                      </>
                    ) : (
                      <>
                        <SendIcon className="h-4 w-4 mr-2" />
                        Enviar v7.0
                      </>
                    )}
                  </>
                )}
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default CreateNotification;