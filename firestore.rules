rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Função auxiliar para verificar autenticação
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Função auxiliar para verificar se o usuário é dono da loja
    function isStoreOwner(storeId) {
      return request.auth.uid == storeId;
    }
    
    // Função auxiliar para verificar se o usuário é cliente
    function isCustomer() {
      return request.auth.token.role == 'customer';
    }
    
    // Verificar se o usuário é o cliente do pedido
    function isOrderCustomer(orderId) {
      let order = get(/databases/$(database)/documents/orders/$(orderId)).data;
      return request.auth.uid == order.customerId;
    }
    
    // Regras para lojas
    match /stores/{storeId} {
      allow read: if isAuthenticated();
      allow write: if isStoreOwner(storeId);
    }
    
    // Regras para usuários
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || resource.data.role == 'store');
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Regras para produtos
    match /products/{productId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isStoreOwner(resource.data.storeId);
    }
    
    // Regras para pedidos
    match /orders/{orderId} {
      allow read: if isAuthenticated() && 
        (isOrderCustomer(orderId) || isStoreOwner(resource.data.storeId));
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && isStoreOwner(resource.data.storeId);
    }
    
    // Regras para chats
    match /chats/{chatId} {
      allow read: if isAuthenticated() && 
        (resource.data.customerId == request.auth.uid || 
         resource.data.storeId == request.auth.uid);
      
      // Regras para mensagens de chat
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
          (get(/databases/$(database)/documents/chats/$(chatId)).data.customerId == request.auth.uid || 
           get(/databases/$(database)/documents/chats/$(chatId)).data.storeId == request.auth.uid);
        allow create: if isAuthenticated() && 
          (get(/databases/$(database)/documents/chats/$(chatId)).data.customerId == request.auth.uid || 
           get(/databases/$(database)/documents/chats/$(chatId)).data.storeId == request.auth.uid);
      }
    }
    
    // Regras para notificações
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && isStoreOwner(resource.data.storeId);
      allow create, update, delete: if isAuthenticated() && isStoreOwner(resource.data.storeId);
    }
    
    // Regras para tokens de dispositivo
    match /userTokens/{tokenId} {
      allow read: if isAuthenticated() && resource.data.userId == request.auth.uid;
      allow write: if isAuthenticated() && resource.data.userId == request.auth.uid;
    }
  }
}